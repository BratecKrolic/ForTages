{
	"info": {
		"_postman_id": "3fed7495-f229-46fc-aacf-566cdaba105a",
		"name": "Swagger Petstore",
		"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30052320"
	},
	"item": [
		{
			"name": "pet",
			"item": [
				{
					"name": "Add a new pet to the store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"petID\", jsonData.id);\r",
									"pm.collectionVariables.set(\"petName\", jsonData.name);\r",
									"pm.collectionVariables.set(\"petCategoryID\", jsonData.category.id);\r",
									"pm.collectionVariables.set(\"petCategoryName\", jsonData.category.name);\r",
									"pm.collectionVariables.set(\"petTagID\", jsonData.tags[0].id);\r",
									"pm.collectionVariables.set(\"petTagName\", jsonData.tags[0].name);\r",
									"pm.collectionVariables.set(\"petStatus\", jsonData.status);\r",
									"\r",
									"//check json scheme in response\r",
									"const expectedSchema = {\r",
									"  \"id\": 0,\r",
									"  \"category\": {\r",
									"    \"id\": 0,\r",
									"    \"name\": \"string\"\r",
									"  },\r",
									"  \"name\": \"doggie\",\r",
									"  \"photoUrls\": [\r",
									"    \"string\"\r",
									"  ],\r",
									"  \"tags\": [\r",
									"    {\r",
									"      \"id\": 0,\r",
									"      \"name\": \"string\"\r",
									"    }\r",
									"  ],\r",
									"  \"status\": \"available\"\r",
									"};\r",
									"\r",
									"// Test that the response matches the expected scheme using built-in scheme verification\r",
									"pm.test('response matches JSON schema', () => {\r",
									"    pm.response.to.have.jsonSchema(expectedSchema);\r",
									"});\r",
									"\r",
									"//check json response contains and equals sent values\r",
									"pm.test(\"petID equals environment variable 'petID'\", function (){\r",
									"    pm.expect(jsonData.id).to.equals(pm.variables.get(\"petID\"));\r",
									"})\r",
									"pm.test(\"petName equals environment variable 'petName'\", function (){\r",
									"    pm.expect(jsonData.name).to.equals(pm.variables.get(\"petName\"));\r",
									"})\r",
									"pm.test(\"petCategoryID equals environment variable 'petCategoryID'\", function (){\r",
									"    pm.expect(jsonData.category.id).to.equals(pm.variables.get(\"petCategoryID\"));\r",
									"})\r",
									"pm.test(\"petCategoryName equals environment variable 'petCategoryName'\", function (){\r",
									"    pm.expect(jsonData.category.name).to.equals(pm.variables.get(\"petCategoryName\"));\r",
									"})\r",
									"pm.test(\"petTagID equals environment variable 'petTagID'\", function (){\r",
									"    pm.expect(jsonData.tags[0].id).to.equals(pm.variables.get(\"petTagID\"));\r",
									"})\r",
									"pm.test(\"petTagName equals environment variable 'petTagName'\", function (){\r",
									"    pm.expect(jsonData.tags[0].name).to.equals(pm.variables.get(\"petTagName\"));\r",
									"})\r",
									"pm.test(\"petStatus equals environment variable 'petStatus'\", function (){\r",
									"    pm.expect(jsonData.status).to.equals(pm.variables.get(\"petStatus\"));\r",
									"})\r",
									"\r",
									"// code tests\r",
									"pm.test(\"Successful POST request, returns code '200'\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '405'\", function () {\r",
									"    pm.response.to.not.have.status(405)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '400'\", function () {\r",
									"    pm.response.to.not.have.status(400)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "read:pets write:pets",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://petstore.swagger.io/oauth/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "implicit",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Buddy\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": 1234567890,\n  \"category\": {\n    \"id\": 654321,\n    \"name\": \"Dog\"\n  },\n  \"tags\": [\n    {\n      \"id\": 987654,\n      \"name\": \"Something\"\n    }\n  ],\n  \"status\": \"available\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"sold\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Find pet by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//check json scheme in response",
									"const expectedSchema = {",
									"  \"id\": 0,",
									"  \"category\": {",
									"    \"id\": 0,",
									"    \"name\": \"string\"",
									"  },",
									"  \"name\": \"doggie\",",
									"  \"photoUrls\": [",
									"    \"string\"",
									"  ],",
									"  \"tags\": [",
									"    {",
									"      \"id\": 0,",
									"      \"name\": \"string\"",
									"    }",
									"  ],",
									"  \"status\": \"available\"",
									"};",
									"",
									"// Test that the response matches the expected scheme using built-in scheme verification",
									"pm.test('response matches JSON schema', () => {",
									"    pm.response.to.have.jsonSchema(expectedSchema);",
									"});",
									"",
									"//check json response contains and equals sent values",
									"pm.test(\"petID equals environment variable 'petID'\", function (){",
									"    pm.expect(jsonData.id).to.equals(pm.variables.get(\"petID\"));",
									"})",
									"pm.test(\"petName equals environment variable 'petName'\", function (){",
									"    pm.expect(jsonData.name).to.equals(pm.variables.get(\"petName\"));",
									"})",
									"pm.test(\"petCategoryID equals environment variable 'petCategoryID'\", function (){",
									"    pm.expect(jsonData.category.id).to.equals(pm.variables.get(\"petCategoryID\"));",
									"})",
									"pm.test(\"petCategoryName equals environment variable 'petCategoryName'\", function (){",
									"    pm.expect(jsonData.category.name).to.equals(pm.variables.get(\"petCategoryName\"));",
									"})",
									"pm.test(\"petTagID equals environment variable 'petTagID'\", function (){",
									"    pm.expect(jsonData.tags[0].id).to.equals(pm.variables.get(\"petTagID\"));",
									"})",
									"pm.test(\"petTagName equals environment variable 'petTagName'\", function (){",
									"    pm.expect(jsonData.tags[0].name).to.equals(pm.variables.get(\"petTagName\"));",
									"})",
									"pm.test(\"petStatus equals environment variable 'petStatus'\", function (){",
									"    pm.expect(jsonData.status).to.equals(pm.variables.get(\"petStatus\"));",
									"})",
									"",
									"// code tests",
									"pm.test(\"Successful POST request, returns code '200'\", function () {",
									"    pm.response.to.have.status(200)",
									"});",
									"pm.test(\"Successful POST request, returned code is not '404'\", function () {",
									"    pm.response.to.not.have.status(404)",
									"});",
									"pm.test(\"Successful POST request, returned code is not '405'\", function () {",
									"    pm.response.to.not.have.status(405)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "{{petID}}"
								}
							]
						},
						"description": "Returns a single pet"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"sold\"\n}"
						},
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Find pet by InvalidID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//check json response includes defined models\r",
									"pm.test(\"Body has response object model: 'code'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"code\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'type'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"//check response code\r",
									"pm.test(\"Returns code '404'\", function () {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"//check response values\r",
									"pm.test(\"Response 'code' equals '404'\", function (){\r",
									"    pm.expect(jsonData.code).to.equals(404);\r",
									"})\r",
									"pm.test(\"Response 'type' equals 'unknown'\", function (){\r",
									"    pm.expect(jsonData.type).to.equals('unknown');\r",
									"})\r",
									"pm.test(\"Response 'message' equals 'Exception string'\", function (){\r",
									"    pm.expect(jsonData.message).to.equals('java.lang.NumberFormatException: For input string: \\\"AAA\\\"');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "AAA"
								}
							]
						},
						"description": "Returns a single pet"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"sold\"\n}"
						},
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Deletes created pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//check json response includes defined models\r",
									"pm.test(\"Body has response object model: 'code'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"code\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'type'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"//check response code\r",
									"pm.test(\"Returns code '200'\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"//check response values\r",
									"pm.test(\"Response 'code' equals '200'\", function (){\r",
									"    pm.expect(jsonData.code).to.equals(200);\r",
									"})\r",
									"pm.test(\"Response 'type' equals 'unknown'\", function (){\r",
									"    pm.expect(jsonData.type).to.equals('unknown');\r",
									"})\r",
									"pm.test(\"Response 'message' equals 'message'\", function (){\r",
									"    pm.expect(jsonData.message).to.equals(String((pm.variables.get(\"petID\"))));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "read:pets write:pets",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://petstore.swagger.io/oauth/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "implicit",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "{{petID}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "api_key",
										"value": "<string>"
									},
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "api_key",
										"value": "<string>"
									},
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Deletes created pet again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check response code\r",
									"pm.test(\"Returns code '404'\", function () {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"pm.test(\"Does not return code '200'\", function () {\r",
									"    pm.response.to.not.have.status(200)\r",
									"});\r",
									"pm.test(\"Does not return code '400'\", function () {\r",
									"    pm.response.to.not.have.status(400)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "read:pets write:pets",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://petstore.swagger.io/oauth/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "implicit",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "{{petID}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "api_key",
										"value": "<string>"
									},
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "api_key",
										"value": "<string>"
									},
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "store",
			"item": [
				{
					"name": "Place an order for a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"orderID\", jsonData.id);\r",
									"pm.collectionVariables.set(\"orderPetID\", jsonData.petId);\r",
									"pm.collectionVariables.set(\"orderQuantity\", jsonData.quantity);\r",
									"pm.collectionVariables.set(\"orderShipDate\", jsonData.shipDate);\r",
									"pm.collectionVariables.set(\"orderStatus\", jsonData.status);\r",
									"pm.collectionVariables.set(\"orderComplete\", jsonData.complete);\r",
									"\r",
									"//check json scheme in response\r",
									"const expectedSchema = {\r",
									"  \"id\": 0,\r",
									"  \"petId\": 0,\r",
									"  \"quantity\": 0,\r",
									"  \"shipDate\": \"2023-09-28T19:17:28\",\r",
									"  \"status\": \"placed\",\r",
									"  \"complete\": true\r",
									"};\r",
									"\r",
									"// Test that the response matches the expected scheme using built-in scheme verification\r",
									"pm.test('response matches JSON schema', () => {\r",
									"    pm.response.to.have.jsonSchema(expectedSchema);\r",
									"});\r",
									"\r",
									"//check json response contains and equals sent values\r",
									"pm.test(\"orderID equals environment variable 'orderID'\", function (){\r",
									"    pm.expect(jsonData.id).to.equals(pm.variables.get(\"orderID\"));\r",
									"})\r",
									"pm.test(\"orderPetID equals environment variable 'orderPetID'\", function (){\r",
									"    pm.expect(jsonData.petId).to.equals(pm.variables.get(\"orderPetID\"));\r",
									"})\r",
									"pm.test(\"orderQuantity equals environment variable 'orderQuantity'\", function (){\r",
									"    pm.expect(jsonData.quantity).to.equals(pm.variables.get(\"orderQuantity\"));\r",
									"})\r",
									"pm.test(\"orderShipDate equals environment variable 'orderShipDate'\", function (){\r",
									"    pm.expect(jsonData.shipDate).to.equals(pm.variables.get(\"orderShipDate\"));\r",
									"})\r",
									"pm.test(\"status equals environment variable 'orderStatus'\", function (){\r",
									"    pm.expect(jsonData.status).to.equals(pm.variables.get(\"orderStatus\"));\r",
									"})\r",
									"pm.test(\"complete equals environment variable 'orderComplete'\", function (){\r",
									"    pm.expect(jsonData.complete).to.equals(pm.variables.get(\"orderComplete\"));\r",
									"})\r",
									"\r",
									"\r",
									"// code tests\r",
									"pm.test(\"Successful POST request, returns code '200'\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '405'\", function () {\r",
									"    pm.response.to.not.have.status(405)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '400'\", function () {\r",
									"    pm.response.to.not.have.status(400)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 987654321,\n  \"petId\": 321,\n  \"quantity\": \"10\",\n  \"shipDate\": \"2023-09-28T19:17:28\",\n  \"status\": \"delivered\",\n  \"complete\": true\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Find purchase order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"orderID\", jsonData.id);\r",
									"pm.collectionVariables.set(\"orderPetID\", jsonData.petId);\r",
									"pm.collectionVariables.set(\"orderQuantity\", jsonData.quantity);\r",
									"pm.collectionVariables.set(\"orderShipDate\", jsonData.shipDate);\r",
									"pm.collectionVariables.set(\"orderStatus\", jsonData.status);\r",
									"pm.collectionVariables.set(\"orderComplete\", jsonData.complete);\r",
									"\r",
									"//check json scheme in response\r",
									"const expectedSchema = {\r",
									"  \"id\": 0,\r",
									"  \"petId\": 0,\r",
									"  \"quantity\": 0,\r",
									"  \"shipDate\": \"2023-09-28T19:17:28\",\r",
									"  \"status\": \"placed\",\r",
									"  \"complete\": true\r",
									"};\r",
									"\r",
									"// Test that the response matches the expected scheme using built-in scheme verification\r",
									"pm.test('response matches JSON schema', () => {\r",
									"    pm.response.to.have.jsonSchema(expectedSchema);\r",
									"});\r",
									"\r",
									"//check json response contains and equals sent values\r",
									"pm.test(\"orderID equals environment variable 'orderID'\", function (){\r",
									"    pm.expect(jsonData.id).to.equals(pm.variables.get(\"orderID\"));\r",
									"})\r",
									"pm.test(\"orderPetID equals environment variable 'orderPetID'\", function (){\r",
									"    pm.expect(jsonData.petId).to.equals(pm.variables.get(\"orderPetID\"));\r",
									"})\r",
									"pm.test(\"orderQuantity equals environment variable 'orderQuantity'\", function (){\r",
									"    pm.expect(jsonData.quantity).to.equals(pm.variables.get(\"orderQuantity\"));\r",
									"})\r",
									"pm.test(\"orderShipDate equals environment variable 'orderShipDate'\", function (){\r",
									"    pm.expect(jsonData.shipDate).to.equals(pm.variables.get(\"orderShipDate\"));\r",
									"})\r",
									"pm.test(\"status equals environment variable 'orderStatus'\", function (){\r",
									"    pm.expect(jsonData.status).to.equals(pm.variables.get(\"orderStatus\"));\r",
									"})\r",
									"pm.test(\"complete equals environment variable 'orderComplete'\", function (){\r",
									"    pm.expect(jsonData.complete).to.equals(pm.variables.get(\"orderComplete\"));\r",
									"})\r",
									"\r",
									"\r",
									"// code tests\r",
									"pm.test(\"Successful POST request, returns code '200'\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '405'\", function () {\r",
									"    pm.response.to.not.have.status(405)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '400'\", function () {\r",
									"    pm.response.to.not.have.status(400)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderID}}"
								}
							]
						},
						"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Order not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Find purchase order by InvalidID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//check json response includes defined models\r",
									"pm.test(\"Body has response object model: 'code'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"code\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'type'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"//check response code\r",
									"pm.test(\"Returns code '404'\", function () {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"//check response values\r",
									"pm.test(\"Response 'code' equals '404'\", function (){\r",
									"    pm.expect(jsonData.code).to.equals(404);\r",
									"})\r",
									"pm.test(\"Response 'type' equals 'unknown'\", function (){\r",
									"    pm.expect(jsonData.type).to.equals('unknown');\r",
									"})\r",
									"pm.test(\"Response 'message' equals 'Exception string'\", function (){\r",
									"    pm.expect(jsonData.message).to.equals('java.lang.NumberFormatException: For input string: \\\"CCC\\\"');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "CCC"
								}
							]
						},
						"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Order not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete purchase order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//check json response includes defined models\r",
									"pm.test(\"Body has response object model: 'code'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"code\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'type'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"//check response code\r",
									"pm.test(\"Returns code '200'\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '400'\", function () {\r",
									"    pm.response.to.not.have.status(400)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '404'\", function () {\r",
									"    pm.response.to.not.have.status(404)\r",
									"});\r",
									"\r",
									"//check response values\r",
									"pm.test(\"Response 'code' equals '200'\", function (){\r",
									"    pm.expect(jsonData.code).to.equals(200);\r",
									"})\r",
									"pm.test(\"Response 'type' equals 'unknown'\", function (){\r",
									"    pm.expect(jsonData.type).to.equals('unknown');\r",
									"})\r",
									"pm.test(\"Response 'message' equals 'message'\", function (){\r",
									"    pm.expect(jsonData.message).to.equals(String((pm.variables.get(\"orderID\"))));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderID}}"
								}
							]
						},
						"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Order not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete purchase order by ID again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//check json response includes defined models\r",
									"pm.test(\"Body has response object model: 'code'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"code\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'type'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"//check response code\r",
									"pm.test(\"Returns code '200'\", function () {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '400'\", function () {\r",
									"    pm.response.to.not.have.status(200)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '404'\", function () {\r",
									"    pm.response.to.not.have.status(400)\r",
									"});\r",
									"\r",
									"//check response values\r",
									"pm.test(\"Response 'code' equals '404'\", function (){\r",
									"    pm.expect(jsonData.code).to.equals(404);\r",
									"})\r",
									"pm.test(\"Response 'type' equals 'unknown'\", function (){\r",
									"    pm.expect(jsonData.type).to.equals('unknown');\r",
									"})\r",
									"pm.test(\"Response 'message' equals 'message'\", function (){\r",
									"    pm.expect(jsonData.message).to.equals(\"Order Not Found\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderID}}"
								}
							]
						},
						"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Order not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete purchase order by invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//check json response includes defined models\r",
									"pm.test(\"Body has response object model: 'code'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"code\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'type'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"//check response code\r",
									"pm.test(\"Returns code '200'\", function () {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '400'\", function () {\r",
									"    pm.response.to.not.have.status(200)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '404'\", function () {\r",
									"    pm.response.to.not.have.status(400)\r",
									"});\r",
									"\r",
									"//check response values\r",
									"pm.test(\"Response 'code' equals '404'\", function (){\r",
									"    pm.expect(jsonData.code).to.equals(404);\r",
									"})\r",
									"pm.test(\"Response 'type' equals 'unknown'\", function (){\r",
									"    pm.expect(jsonData.type).to.equals('unknown');\r",
									"})\r",
									"pm.test(\"Response 'message' equals 'message'\", function (){\r",
									"    pm.expect(jsonData.message).to.equals(\"java.lang.NumberFormatException: For input string: \\\"FFF\\\"\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "FFF"
								}
							]
						},
						"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Order not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//check json response includes defined models\r",
									"pm.test(\"Body has response object model: 'code'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"code\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'type'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"//check response code\r",
									"pm.test(\"Returns code '200'\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '400'\", function () {\r",
									"    pm.response.to.not.have.status(400)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '404'\", function () {\r",
									"    pm.response.to.not.have.status(404)\r",
									"});\r",
									"\r",
									"//check response values\r",
									"pm.test(\"Response 'code' equals '200'\", function (){\r",
									"    pm.expect(jsonData.code).to.equals(200);\r",
									"})\r",
									"pm.test(\"Response 'type' equals 'unknown'\", function (){\r",
									"    pm.expect(jsonData.type).to.equals('unknown');\r",
									"})\r",
									"pm.test(\"Response 'message' equals 'message'\", function (){\r",
									"    pm.expect(jsonData.message).to.equals(\"25362536\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 25362536,\n  \"username\": \"Sam\",\n  \"firstName\": \"Sam\",\n  \"lastName\": \"Truong\",\n  \"email\": \"sam_truaong@com.com\",\n  \"password\": \"passwordhash\",\n  \"phone\": \"12121212121234\",\n  \"userStatus\": 1\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create user invalidData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//check json response includes defined models\r",
									"pm.test(\"Body has response object model: 'code'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"code\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'type'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"//check response code\r",
									"pm.test(\"Returns code '500'\", function () {\r",
									"    pm.response.to.have.status(500)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '200'\", function () {\r",
									"    pm.response.to.not.have.status(200)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '400'\", function () {\r",
									"    pm.response.to.not.have.status(400)\r",
									"});\r",
									"\r",
									"//check response values\r",
									"pm.test(\"Response 'code' equals '500'\", function (){\r",
									"    pm.expect(jsonData.code).to.equals(500);\r",
									"})\r",
									"pm.test(\"Response 'type' equals 'unknown'\", function (){\r",
									"    pm.expect(jsonData.type).to.equals('unknown');\r",
									"})\r",
									"pm.test(\"Response 'message' equals 'message'\", function (){\r",
									"    pm.expect(jsonData.message).to.equals(\"something bad happened\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"qwe\",\n  \"username\": 123,\n  \"firstName\": \"Sam\",\n  \"lastName\": 123,\n  \"email\": \"sam_truaong@com.com\",\n  \"password\": 123,\n  \"phone\": \"12121212121234\",\n  \"userStatus\": 1\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get user by user name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"userName\", jsonData.username);\r",
									"\r",
									"//check json scheme in response\r",
									"const expectedSchema = {\r",
									"  \"id\": 0,\r",
									"  \"username\": \"string\",\r",
									"  \"firstName\": \"string\",\r",
									"  \"lastName\": \"string\",\r",
									"  \"email\": \"string\",\r",
									"  \"password\": \"string\",\r",
									"  \"phone\": \"string\",\r",
									"  \"userStatus\": 0\r",
									"};\r",
									"\r",
									"// Test that the response matches the expected scheme using built-in scheme verification\r",
									"pm.test('response matches JSON schema', () => {\r",
									"    pm.response.to.have.jsonSchema(expectedSchema);\r",
									"});\r",
									"\r",
									"//check json response contains and equals sent values\r",
									"pm.test(\"userID equals 25362536\", function (){\r",
									"    pm.expect(jsonData.id).to.equals(25362536);\r",
									"})\r",
									"pm.test(\"username equals 'Sam'\", function (){\r",
									"    pm.expect(jsonData.username).to.equals(\"Sam\");\r",
									"})\r",
									"pm.test(\"userfirstname equals 'Sam'\", function (){\r",
									"    pm.expect(jsonData.firstName).to.equals(\"Sam\");\r",
									"})\r",
									"pm.test(\"userlastname equals 'Truong'\", function (){\r",
									"    pm.expect(jsonData.lastName).to.equals(\"Truong\");\r",
									"})\r",
									"pm.test(\"useremail equals 'sam_truaong@com.com'\", function (){\r",
									"    pm.expect(jsonData.email).to.equals(\"sam_truaong@com.com\");\r",
									"})\r",
									"pm.test(\"userpassword equals 'passwordhash'\", function (){\r",
									"    pm.expect(jsonData.password).to.equals(\"passwordhash\");\r",
									"})\r",
									"pm.test(\"userphone equals '12121212121234'\", function (){\r",
									"    pm.expect(jsonData.phone).to.equals(\"12121212121234\");\r",
									"})\r",
									"pm.test(\"userstatus equals 1\", function (){\r",
									"    pm.expect(jsonData.userStatus).to.equals(1);\r",
									"})\r",
									"\r",
									"// code tests\r",
									"pm.test(\"Successful POST request, returns code '200'\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '404'\", function () {\r",
									"    pm.response.to.not.have.status(404)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '400'\", function () {\r",
									"    pm.response.to.not.have.status(400)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "Sam"
								}
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}"
						},
						{
							"name": "Invalid username supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "User not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get user by user unknown name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//check json response includes defined models\r",
									"pm.test(\"Body has response object model: 'code'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"code\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'type'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"//check response code\r",
									"pm.test(\"Returns code '404'\", function () {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '200'\", function () {\r",
									"    pm.response.to.not.have.status(200)\r",
									"});\r",
									"pm.test(\"Successful POST request, returned code is not '400'\", function () {\r",
									"    pm.response.to.not.have.status(400)\r",
									"});\r",
									"\r",
									"//check response values\r",
									"pm.test(\"Response 'code' equals '1'\", function (){\r",
									"    pm.expect(jsonData.code).to.equals(1);\r",
									"})\r",
									"pm.test(\"Response 'type' equals 'error'\", function (){\r",
									"    pm.expect(jsonData.type).to.equals('error');\r",
									"})\r",
									"pm.test(\"Response 'message' equals 'message'\", function (){\r",
									"    pm.expect(jsonData.message).to.equals(\"User not found\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "999999999"
								}
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}"
						},
						{
							"name": "Invalid username supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "User not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//check json response includes defined models\r",
									"pm.test(\"Body has response object model: 'code'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"code\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'type'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"type\");\r",
									"});\r",
									"pm.test(\"Body has response object model: 'message'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"//check response code\r",
									"pm.test(\"Returns code '200'\", function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"//check response values\r",
									"pm.test(\"Response 'code' equals '200'\", function (){\r",
									"    pm.expect(jsonData.code).to.equals(200);\r",
									"})\r",
									"pm.test(\"Response 'type' equals 'unknown'\", function (){\r",
									"    pm.expect(jsonData.type).to.equals('unknown');\r",
									"})\r",
									"pm.test(\"Response 'message' equals 'message'\", function (){\r",
									"    pm.expect(jsonData.message).to.equals(pm.collectionVariables.get(\"userName\"));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "{{userName}}"
								}
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "Invalid username supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "User not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2"
		},
		{
			"key": "petID",
			"value": "1234567890",
			"type": "string"
		},
		{
			"key": "petName",
			"value": "Buddy"
		},
		{
			"key": "petCategoryID",
			"value": "654321",
			"type": "string"
		},
		{
			"key": "petCategoryName",
			"value": "Dog",
			"type": "string"
		},
		{
			"key": "petTagID",
			"value": "987654",
			"type": "string"
		},
		{
			"key": "petTagName",
			"value": "Something",
			"type": "string"
		},
		{
			"key": "petStatus",
			"value": "",
			"type": "string"
		},
		{
			"key": "orderID",
			"value": "987654321",
			"type": "string"
		},
		{
			"key": "orderPetID",
			"value": "",
			"type": "string"
		},
		{
			"key": "orderQuantity",
			"value": "",
			"type": "string"
		},
		{
			"key": "orderShipDate",
			"value": "",
			"type": "string"
		},
		{
			"key": "orderStatus",
			"value": "",
			"type": "string"
		},
		{
			"key": "orderComplete",
			"value": "",
			"type": "string"
		},
		{
			"key": "userID",
			"value": "",
			"type": "string"
		},
		{
			"key": "userName",
			"value": "",
			"type": "string"
		},
		{
			"key": "userFirstName",
			"value": "",
			"type": "string"
		},
		{
			"key": "userLastName",
			"value": "",
			"type": "string"
		},
		{
			"key": "userEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "userPassword",
			"value": "",
			"type": "string"
		},
		{
			"key": "userPhone",
			"value": "",
			"type": "string"
		},
		{
			"key": "UserStatus",
			"value": "",
			"type": "string"
		}
	]
}